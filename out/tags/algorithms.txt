2:I[9485,["250","static/chunks/250-beb6c3ba5ed43307.js","803","static/chunks/803-273bfb42fe6b3975.js","991","static/chunks/991-c5a0e2dc0ceeeaea.js","605","static/chunks/app/tags/%5Btag%5D/page-62e95a9de724b241.js"],""]
8:I[5613,[],""]
a:I[1778,[],""]
b:I[2494,["250","static/chunks/250-beb6c3ba5ed43307.js","803","static/chunks/803-273bfb42fe6b3975.js","247","static/chunks/247-7ddfe16bd298bfc9.js","185","static/chunks/app/layout-87048f244713c428.js"],"Providers"]
c:I[7186,["250","static/chunks/250-beb6c3ba5ed43307.js","803","static/chunks/803-273bfb42fe6b3975.js","247","static/chunks/247-7ddfe16bd298bfc9.js","185","static/chunks/app/layout-87048f244713c428.js"],"MainNav"]
d:I[5250,["250","static/chunks/250-beb6c3ba5ed43307.js","904","static/chunks/app/tags/page-680374a4930e259c.js"],""]
f:I[2807,["250","static/chunks/250-beb6c3ba5ed43307.js","803","static/chunks/803-273bfb42fe6b3975.js","247","static/chunks/247-7ddfe16bd298bfc9.js","185","static/chunks/app/layout-87048f244713c428.js"],"ModeToggle"]
10:I[9817,["250","static/chunks/250-beb6c3ba5ed43307.js","803","static/chunks/803-273bfb42fe6b3975.js","247","static/chunks/247-7ddfe16bd298bfc9.js","185","static/chunks/app/layout-87048f244713c428.js"],"MobileNav"]
3:T45c3,const{Fragment:e,jsx:n,jsxs:l}=arguments[0];function _createMdxContent(a){const r={a:"a",code:"code",figure:"figure",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",ul:"ul",...a.components};return l(e,{children:[n(r.h2,{id:"problem-statement",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#problem-statement",children:"Problem Statement"})}),"\n",n(r.p,{children:"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."}),"\n",n(r.p,{children:"You may assume the two numbers do not contain any leading zero, except the number 0 itself."}),"\n",n(r.h3,{id:"example-1",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-1",children:"Example 1:"})}),"\n",n(r.figure,{"data-rehype-pretty-code-figure":"",children:n(r.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(r.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(r.span,{"data-line":"",children:n(r.span,{children:"Input:  l1 = [2,4,3], l2 = [5,6,4]  "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{children:"Output:  [7,0,8]  "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{children:"Explanation:  342 + 465 = 807."})})]})})}),"\n",n(r.h3,{id:"example-2",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-2",children:"Example 2:"})}),"\n",n(r.figure,{"data-rehype-pretty-code-figure":"",children:n(r.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(r.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(r.span,{"data-line":"",children:n(r.span,{children:"Input:  l1 = [0], l2 = [0]  "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{children:"Output: [0]"})})]})})}),"\n",n(r.h3,{id:"example-3",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-3",children:"Example 3:"})}),"\n",n(r.figure,{"data-rehype-pretty-code-figure":"",children:n(r.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(r.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(r.span,{"data-line":"",children:n(r.span,{children:"Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]  "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{children:"Output: [8,9,9,9,0,0,0,1]"})})]})})}),"\n",n(r.h3,{id:"constraints",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#constraints",children:"Constraints:"})}),"\n",l(r.ul,{children:["\n",n(r.li,{children:"The number of nodes in each linked list is in the range [1, 100]."}),"\n",n(r.li,{children:n(r.code,{children:"0 <= Node.val <= 9"})}),"\n",n(r.li,{children:"It is guaranteed that the list represents a number that does not have leading zeros."}),"\n"]}),"\n",n(r.h2,{id:"approach",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#approach",children:"Approach"})}),"\n",n(r.p,{children:"We will use a linked list to simulate the addition of two numbers, digit by digit, from the least significant to the most significant (reverse order). At each step, we add the corresponding digits and carry, if any."}),"\n",n(r.h3,{id:"algorithm",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#algorithm",children:"Algorithm"})}),"\n",l(r.ol,{children:["\n",n(r.li,{children:"Initialize a dummy head node to simplify the process of building the result linked list."}),"\n",n(r.li,{children:"Iterate over both linked lists simultaneously, adding corresponding digits and the carry."}),"\n",n(r.li,{children:"If one linked list is shorter, treat missing nodes as zeros."}),"\n",n(r.li,{children:"If there is a remaining carry after both linked lists are exhausted, add it as a new node."}),"\n",n(r.li,{children:"Return the next node of the dummy head as the result linked list."}),"\n"]}),"\n",n(r.h3,{id:"flowchart",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#flowchart",children:"Flowchart"})}),"\n",n(r.p,{children:n(r.img,{src:"/leetcode/add_two.png",alt:"Flowchart of Add Two Algorithm"})}),"\n",n(r.h3,{id:"implementation-in-go",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#implementation-in-go",children:"Implementation in Go"})}),"\n",n(r.figure,{"data-rehype-pretty-code-figure":"",children:n(r.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"go","data-theme":"github-dark",children:l(r.code,{"data-language":"go","data-theme":"github-dark",style:{display:"grid"},children:[n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"// ListNode defines a linked list node"})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"// AddTwoNumbers adds two numbers represented by two linked lists."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"// Each linked list stores digits in reverse order, and the function"})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"// returns the sum as a linked list, also in reverse order."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#F97583"},children:"func"}),n(r.span,{style:{color:"#B392F0"},children:" AddTwoNumbers"}),n(r.span,{style:{color:"#E1E4E8"},children:"("}),n(r.span,{style:{color:"#FFAB70"},children:"l1"}),n(r.span,{style:{color:"#F97583"},children:" *"}),n(r.span,{style:{color:"#B392F0"},children:"ListNode"}),n(r.span,{style:{color:"#E1E4E8"},children:", "}),n(r.span,{style:{color:"#FFAB70"},children:"l2"}),n(r.span,{style:{color:"#F97583"},children:" *"}),n(r.span,{style:{color:"#B392F0"},children:"ListNode"}),n(r.span,{style:{color:"#E1E4E8"},children:") "}),n(r.span,{style:{color:"#F97583"},children:"*"}),n(r.span,{style:{color:"#B392F0"},children:"ListNode"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // Create a dummy node to simplify the logic of appending nodes to the result list."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"    head "}),n(r.span,{style:{color:"#F97583"},children:":="}),n(r.span,{style:{color:"#F97583"},children:" &"}),n(r.span,{style:{color:"#B392F0"},children:"ListNode"}),n(r.span,{style:{color:"#E1E4E8"},children:"{Val: "}),n(r.span,{style:{color:"#79B8FF"},children:"0"}),n(r.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"    "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // Initialize variables: "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // - n1 and n2 are the digits from the two linked lists."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:'    // - carry holds any value that "carries over" to the next digit.'})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // - current is a pointer used to build the result list."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"    n1, n2, carry, current "}),n(r.span,{style:{color:"#F97583"},children:":="}),n(r.span,{style:{color:"#79B8FF"},children:" 0"}),n(r.span,{style:{color:"#E1E4E8"},children:", "}),n(r.span,{style:{color:"#79B8FF"},children:"0"}),n(r.span,{style:{color:"#E1E4E8"},children:", "}),n(r.span,{style:{color:"#79B8FF"},children:"0"}),n(r.span,{style:{color:"#E1E4E8"},children:", head"})]}),"\n",n(r.span,{"data-line":"",children:" "}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // Continue looping while there are still nodes in either l1 or l2, "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // or if there's still a carry to process (e.g., when adding two 9s)."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#F97583"},children:"    for"}),n(r.span,{style:{color:"#E1E4E8"},children:" l1 "}),n(r.span,{style:{color:"#F97583"},children:"!="}),n(r.span,{style:{color:"#79B8FF"},children:" nil"}),n(r.span,{style:{color:"#F97583"},children:" ||"}),n(r.span,{style:{color:"#E1E4E8"},children:" l2 "}),n(r.span,{style:{color:"#F97583"},children:"!="}),n(r.span,{style:{color:"#79B8FF"},children:" nil"}),n(r.span,{style:{color:"#F97583"},children:" ||"}),n(r.span,{style:{color:"#E1E4E8"},children:" carry "}),n(r.span,{style:{color:"#F97583"},children:"!="}),n(r.span,{style:{color:"#79B8FF"},children:" 0"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Get the value from the current node of l1, if it exists. "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Otherwise, set n1 to 0."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#F97583"},children:"        if"}),n(r.span,{style:{color:"#E1E4E8"},children:" l1 "}),n(r.span,{style:{color:"#F97583"},children:"!="}),n(r.span,{style:{color:"#79B8FF"},children:" nil"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            n1 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" l1.Val"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            l1 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" l1.Next "}),n(r.span,{style:{color:"#6A737D"},children:"// Move to the next node in l1."})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"        } "}),n(r.span,{style:{color:"#F97583"},children:"else"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            n1 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#79B8FF"},children:" 0"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"        }"})}),"\n",n(r.span,{"data-line":"",children:" "}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Get the value from the current node of l2, if it exists. "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Otherwise, set n2 to 0."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#F97583"},children:"        if"}),n(r.span,{style:{color:"#E1E4E8"},children:" l2 "}),n(r.span,{style:{color:"#F97583"},children:"!="}),n(r.span,{style:{color:"#79B8FF"},children:" nil"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            n2 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" l2.Val"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            l2 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" l2.Next "}),n(r.span,{style:{color:"#6A737D"},children:"// Move to the next node in l2."})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"        } "}),n(r.span,{style:{color:"#F97583"},children:"else"}),n(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"            n2 "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#79B8FF"},children:" 0"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"        }"})}),"\n",n(r.span,{"data-line":"",children:" "}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Create a new node for the result linked list."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // The value of this node is the sum of n1, n2, and carry, modulo 10."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // This handles cases where the sum exceeds 9 (e.g., 5 + 6 = 11, so we store 1 and carry 1)."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"        current.Next "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#F97583"},children:" &"}),n(r.span,{style:{color:"#B392F0"},children:"ListNode"}),n(r.span,{style:{color:"#E1E4E8"},children:"{Val: (n1 "}),n(r.span,{style:{color:"#F97583"},children:"+"}),n(r.span,{style:{color:"#E1E4E8"},children:" n2 "}),n(r.span,{style:{color:"#F97583"},children:"+"}),n(r.span,{style:{color:"#E1E4E8"},children:" carry) "}),n(r.span,{style:{color:"#F97583"},children:"%"}),n(r.span,{style:{color:"#79B8FF"},children:" 10"}),n(r.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"        "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Move the current pointer to the next node in the result list."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"        current "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" current.Next"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"        "})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Update the carry for the next iteration."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // If the sum of n1, n2, and carry is 10 or greater, carry will be 1."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"        // Otherwise, carry will be 0."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#E1E4E8"},children:"        carry "}),n(r.span,{style:{color:"#F97583"},children:"="}),n(r.span,{style:{color:"#E1E4E8"},children:" (n1 "}),n(r.span,{style:{color:"#F97583"},children:"+"}),n(r.span,{style:{color:"#E1E4E8"},children:" n2 "}),n(r.span,{style:{color:"#F97583"},children:"+"}),n(r.span,{style:{color:"#E1E4E8"},children:" carry) "}),n(r.span,{style:{color:"#F97583"},children:"/"}),n(r.span,{style:{color:"#79B8FF"},children:" 10"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"    }"})}),"\n",n(r.span,{"data-line":"",children:" "}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // Return the result linked list, starting from head.Next."})}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#6A737D"},children:"    // head is just a dummy node used to simplify the logic, so we skip it."})}),"\n",l(r.span,{"data-line":"",children:[n(r.span,{style:{color:"#F97583"},children:"    return"}),n(r.span,{style:{color:"#E1E4E8"},children:" head.Next"})]}),"\n",n(r.span,{"data-line":"",children:n(r.span,{style:{color:"#E1E4E8"},children:"}"})})]})})}),"\n",n(r.h3,{id:"explanation",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#explanation",children:"Explanation"})}),"\n",l(r.ul,{children:["\n",n(r.li,{children:"Initialize Variables: We initialize a dummy head node, which simplifies appending new nodes to the result list. Variables n1, n2, and carry are used to store values from the linked lists and any carry-over during addition."}),"\n",n(r.li,{children:"Iterating Through Lists: We loop until all nodes in both lists are processed and the carry is zero. At each iteration, we extract values from the lists or use 0 if a list is exhausted. Then, we compute the sum and update the carry for the next iteration."}),"\n",n(r.li,{children:"Return the Result: After processing all digits, we return the result list starting from head.Next (since head is a dummy node)."}),"\n"]}),"\n",n(r.h3,{id:"time-and-space-complexity",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#time-and-space-complexity",children:"Time and Space Complexity"})}),"\n",l(r.ul,{children:["\n",n(r.li,{children:"Time Complexity: O(n), where n is the maximum number of nodes in the two linked lists. We iterate through all nodes once."}),"\n",n(r.li,{children:"Space Complexity: O(n) as well, since we are creating a new linked list of size proportional to the input size."}),"\n"]}),"\n",n(r.h2,{id:"conclusion",children:n(r.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#conclusion",children:"Conclusion"})}),"\n",n(r.p,{children:"This solution demonstrates an efficient way to add two numbers represented as linked lists. By utilizing a dummy head node and handling the carry correctly, we can maintain a clean and readable implementation. The time and space complexity is linear, making this approach optimal for this problem."})]})}return{default:function(e={}){const{wrapper:l}=e.components||{};return l?n(l,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};4:T43f2,const{Fragment:n,jsx:e,jsxs:l}=arguments[0];function _createMdxContent(r){const a={a:"a",code:"code",figure:"figure",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...r.components};return l(n,{children:[e(a.h2,{id:"problem-statement",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#problem-statement",children:"Problem Statement"})}),"\n",l(a.p,{children:["Given a string ",e(a.code,{children:"s"}),", return the longest palindromic substring in ",e(a.code,{children:"s"}),"."]}),"\n",e(a.h3,{id:"example-1",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-1",children:"Example 1:"})}),"\n",e(a.figure,{"data-rehype-pretty-code-figure":"",children:e(a.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(a.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[e(a.span,{"data-line":"",children:e(a.span,{children:'Input: `s = "babad"`'})}),"\n",e(a.span,{"data-line":"",children:e(a.span,{children:'Output: `"bab"`'})}),"\n",e(a.span,{"data-line":"",children:e(a.span,{children:'Explanation: `"aba"` is also a valid answer.'})})]})})}),"\n",e(a.h3,{id:"example-2",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-2",children:"Example 2:"})}),"\n",e(a.figure,{"data-rehype-pretty-code-figure":"",children:e(a.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(a.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[e(a.span,{"data-line":"",children:e(a.span,{children:'Input: `s = "cbbd"`'})}),"\n",e(a.span,{"data-line":"",children:e(a.span,{children:'Output: `"bb"`'})})]})})}),"\n",e(a.h3,{id:"constraints",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#constraints",children:"Constraints:"})}),"\n",l(a.ul,{children:["\n",e(a.li,{children:"( 1 \\leq s.length \\leq 1000 )"}),"\n",l(a.li,{children:[e(a.code,{children:"s"})," consists of only digits and English letters."]}),"\n"]}),"\n",e(a.h2,{id:"approach",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#approach",children:"Approach"})}),"\n",l(a.p,{children:["To find the longest palindromic substring, we can use the ",e(a.strong,{children:"expand around center"})," technique. The idea is to iterate through each character in the string and treat it as the center of a potential palindrome. Since palindromes can be of both odd and even lengths, we will check for both cases."]}),"\n",e(a.h3,{id:"algorithm",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#algorithm",children:"Algorithm"})}),"\n",l(a.ol,{children:["\n",l(a.li,{children:[e(a.strong,{children:"Expand Around Center"}),": For each character in the string, we expand outwards to check how far we can go while maintaining the palindrome property."]}),"\n",l(a.li,{children:[e(a.strong,{children:"Track the Longest Palindrome"}),": During each expansion, if we find a longer palindrome than the previously recorded one, we update our longest palindrome substring."]}),"\n"]}),"\n",e(a.h3,{id:"flowchart",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#flowchart",children:"Flowchart"})}),"\n",e(a.p,{children:e(a.img,{src:"/leetcode/longest_palingdrome.png",alt:"Flowchart of Longest Palindromic Substring "})}),"\n",e(a.h3,{id:"implementation-in-go",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#implementation-in-go",children:"Implementation in Go"})}),"\n",e(a.p,{children:"Here is the Go implementation of the solution:"}),"\n",e(a.figure,{"data-rehype-pretty-code-figure":"",children:e(a.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"go","data-theme":"github-dark",children:l(a.code,{"data-language":"go","data-theme":"github-dark",style:{display:"grid"},children:[l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"package"}),e(a.span,{style:{color:"#B392F0"},children:" main"})]}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"import"}),e(a.span,{style:{color:"#9ECBFF"},children:' "'}),e(a.span,{style:{color:"#B392F0"},children:"fmt"}),e(a.span,{style:{color:"#9ECBFF"},children:'"'})]}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"// longestPalindrome finds the longest palindromic substring in s"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"func"}),e(a.span,{style:{color:"#B392F0"},children:" longestPalindrome"}),e(a.span,{style:{color:"#E1E4E8"},children:"("}),e(a.span,{style:{color:"#FFAB70"},children:"s"}),e(a.span,{style:{color:"#F97583"},children:" string"}),e(a.span,{style:{color:"#E1E4E8"},children:") "}),e(a.span,{style:{color:"#F97583"},children:"string"}),e(a.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\tstart, end "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#79B8FF"},children:" 0"}),e(a.span,{style:{color:"#E1E4E8"},children:", "}),e(a.span,{style:{color:"#79B8FF"},children:"0"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\tfor"}),e(a.span,{style:{color:"#E1E4E8"},children:" i "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#79B8FF"},children:" 0"}),e(a.span,{style:{color:"#E1E4E8"},children:"; i "}),e(a.span,{style:{color:"#F97583"},children:"<"}),e(a.span,{style:{color:"#B392F0"},children:" len"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s); i"}),e(a.span,{style:{color:"#F97583"},children:"++"}),e(a.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"\t\t// Expand around the center for odd-length palindromes"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\tlen1 "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#B392F0"},children:" expandAroundCenter"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s, i, i)"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"\t\t// Expand around the center for even-length palindromes"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\tlen2 "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#B392F0"},children:" expandAroundCenter"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s, i, i"}),e(a.span,{style:{color:"#F97583"},children:"+"}),e(a.span,{style:{color:"#79B8FF"},children:"1"}),e(a.span,{style:{color:"#E1E4E8"},children:")"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"\t\t// Choose the longer palindrome"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\tlen "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#B392F0"},children:" max"}),e(a.span,{style:{color:"#E1E4E8"},children:"(len1, len2)"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\t\tif"}),e(a.span,{style:{color:"#E1E4E8"},children:" len "}),e(a.span,{style:{color:"#F97583"},children:">"}),e(a.span,{style:{color:"#E1E4E8"},children:" end"}),e(a.span,{style:{color:"#F97583"},children:"-"}),e(a.span,{style:{color:"#E1E4E8"},children:"start {"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"\t\t\t// Update start and end indices of the longest palindrome found"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\t\tstart "}),e(a.span,{style:{color:"#F97583"},children:"="}),e(a.span,{style:{color:"#E1E4E8"},children:" i "}),e(a.span,{style:{color:"#F97583"},children:"-"}),e(a.span,{style:{color:"#E1E4E8"},children:" (len"}),e(a.span,{style:{color:"#F97583"},children:"-"}),e(a.span,{style:{color:"#79B8FF"},children:"1"}),e(a.span,{style:{color:"#E1E4E8"},children:")"}),e(a.span,{style:{color:"#F97583"},children:"/"}),e(a.span,{style:{color:"#79B8FF"},children:"2"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\t\tend "}),e(a.span,{style:{color:"#F97583"},children:"="}),e(a.span,{style:{color:"#E1E4E8"},children:" i "}),e(a.span,{style:{color:"#F97583"},children:"+"}),e(a.span,{style:{color:"#E1E4E8"},children:" len"}),e(a.span,{style:{color:"#F97583"},children:"/"}),e(a.span,{style:{color:"#79B8FF"},children:"2"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"\t\t}"})}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\treturn"}),e(a.span,{style:{color:"#E1E4E8"},children:" s[start : end"}),e(a.span,{style:{color:"#F97583"},children:"+"}),e(a.span,{style:{color:"#79B8FF"},children:"1"}),e(a.span,{style:{color:"#E1E4E8"},children:"]"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"// expandAroundCenter expands around the given center indices and returns the length of the palindrome"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"func"}),e(a.span,{style:{color:"#B392F0"},children:" expandAroundCenter"}),e(a.span,{style:{color:"#E1E4E8"},children:"("}),e(a.span,{style:{color:"#FFAB70"},children:"s"}),e(a.span,{style:{color:"#F97583"},children:" string"}),e(a.span,{style:{color:"#E1E4E8"},children:", "}),e(a.span,{style:{color:"#FFAB70"},children:"left"}),e(a.span,{style:{color:"#F97583"},children:" int"}),e(a.span,{style:{color:"#E1E4E8"},children:", "}),e(a.span,{style:{color:"#FFAB70"},children:"right"}),e(a.span,{style:{color:"#F97583"},children:" int"}),e(a.span,{style:{color:"#E1E4E8"},children:") "}),e(a.span,{style:{color:"#F97583"},children:"int"}),e(a.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\tL, R "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#E1E4E8"},children:" left, right"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\tfor"}),e(a.span,{style:{color:"#E1E4E8"},children:" L "}),e(a.span,{style:{color:"#F97583"},children:">="}),e(a.span,{style:{color:"#79B8FF"},children:" 0"}),e(a.span,{style:{color:"#F97583"},children:" &&"}),e(a.span,{style:{color:"#E1E4E8"},children:" R "}),e(a.span,{style:{color:"#F97583"},children:"<"}),e(a.span,{style:{color:"#B392F0"},children:" len"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s) "}),e(a.span,{style:{color:"#F97583"},children:"&&"}),e(a.span,{style:{color:"#E1E4E8"},children:" s[L] "}),e(a.span,{style:{color:"#F97583"},children:"=="}),e(a.span,{style:{color:"#E1E4E8"},children:" s[R] {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\tL"}),e(a.span,{style:{color:"#F97583"},children:"--"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\t\tR"}),e(a.span,{style:{color:"#F97583"},children:"++"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\treturn"}),e(a.span,{style:{color:"#E1E4E8"},children:" R "}),e(a.span,{style:{color:"#F97583"},children:"-"}),e(a.span,{style:{color:"#E1E4E8"},children:" L "}),e(a.span,{style:{color:"#F97583"},children:"-"}),e(a.span,{style:{color:"#79B8FF"},children:" 1"}),e(a.span,{style:{color:"#6A737D"},children:" // Length of the palindrome"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#6A737D"},children:"// max returns the maximum of two integers"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"func"}),e(a.span,{style:{color:"#B392F0"},children:" max"}),e(a.span,{style:{color:"#E1E4E8"},children:"("}),e(a.span,{style:{color:"#FFAB70"},children:"a"}),e(a.span,{style:{color:"#E1E4E8"},children:", "}),e(a.span,{style:{color:"#FFAB70"},children:"b"}),e(a.span,{style:{color:"#F97583"},children:" int"}),e(a.span,{style:{color:"#E1E4E8"},children:") "}),e(a.span,{style:{color:"#F97583"},children:"int"}),e(a.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\tif"}),e(a.span,{style:{color:"#E1E4E8"},children:" a "}),e(a.span,{style:{color:"#F97583"},children:">"}),e(a.span,{style:{color:"#E1E4E8"},children:" b {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\t\treturn"}),e(a.span,{style:{color:"#E1E4E8"},children:" a"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"\treturn"}),e(a.span,{style:{color:"#E1E4E8"},children:" b"})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#F97583"},children:"func"}),e(a.span,{style:{color:"#B392F0"},children:" main"}),e(a.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\ts1 "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#9ECBFF"},children:' "babad"'})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\tfmt."}),e(a.span,{style:{color:"#B392F0"},children:"Println"}),e(a.span,{style:{color:"#E1E4E8"},children:"("}),e(a.span,{style:{color:"#B392F0"},children:"longestPalindrome"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s1)) "}),e(a.span,{style:{color:"#6A737D"},children:'// Output: "bab" or "aba"'})]}),"\n",e(a.span,{"data-line":"",children:" "}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\ts2 "}),e(a.span,{style:{color:"#F97583"},children:":="}),e(a.span,{style:{color:"#9ECBFF"},children:' "cbbd"'})]}),"\n",l(a.span,{"data-line":"",children:[e(a.span,{style:{color:"#E1E4E8"},children:"\tfmt."}),e(a.span,{style:{color:"#B392F0"},children:"Println"}),e(a.span,{style:{color:"#E1E4E8"},children:"("}),e(a.span,{style:{color:"#B392F0"},children:"longestPalindrome"}),e(a.span,{style:{color:"#E1E4E8"},children:"(s2)) "}),e(a.span,{style:{color:"#6A737D"},children:'// Output: "bb"'})]}),"\n",e(a.span,{"data-line":"",children:e(a.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",e(a.span,{"data-line":"",children:" "})]})})}),"\n",e(a.h3,{id:"explanation",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#explanation",children:"Explanation"})}),"\n",l(a.ol,{children:["\n",l(a.li,{children:[e(a.strong,{children:"Initialization"}),": We initialize start and end to track the longest palindrome's indices."]}),"\n",l(a.li,{children:[e(a.strong,{children:"Iterating Through Characters"}),": For each character in the string, we consider it as a center and attempt to expand outwards for both odd-length and even-length palindromes."]}),"\n",l(a.li,{children:[e(a.strong,{children:"Updating Longest Palindrome"}),": Whenever we find a longer palindrome than previously recorded, we update the start and end indices to capture the new longest substring."]}),"\n"]}),"\n",e(a.h3,{id:"time-and-space-complexity",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#time-and-space-complexity",children:"Time and Space Complexity"})}),"\n",l(a.ol,{children:["\n",l(a.li,{children:[e(a.strong,{children:"Time Complexity"}),": O(n^2), where n is the length of the input string. In the worst case, we may need to check all characters and expand around them."]}),"\n",l(a.li,{children:[e(a.strong,{children:"Space Complexity"}),": O(1), as we are only using a few variables to track indices and lengths."]}),"\n"]}),"\n",e(a.h2,{id:"conclusion",children:e(a.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#conclusion",children:"Conclusion"})}),"\n",e(a.p,{children:"This solution effectively finds the longest palindromic substring using the expand around center technique, providing a straightforward approach that balances clarity and efficiency. The algorithm is suitable for input strings of lengths up to 1000, making it efficient for competitive programming and interview scenarios."})]})}return{default:function(n={}){const{wrapper:l}=n.components||{};return l?e(l,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};5:T4568,const{Fragment:e,jsx:n,jsxs:l}=arguments[0];function _createMdxContent(i){const t={a:"a",code:"code",figure:"figure",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...i.components};return l(e,{children:[n(t.h2,{id:"problem-statement",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#problem-statement",children:"Problem Statement"})}),"\n",l(t.p,{children:["Given a string ",n(t.code,{children:"s"}),", find the length of the longest substring without repeating characters."]}),"\n",n(t.h3,{id:"example-1",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-1",children:"Example 1:"})}),"\n",n(t.figure,{"data-rehype-pretty-code-figure":"",children:n(t.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(t.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(t.span,{"data-line":"",children:n(t.span,{children:'Input: `s = "abcabcbb"`'})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:"Output: `3`"})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:'Explanation: The answer is `"abc"`, with the length of 3.'})})]})})}),"\n",n(t.h3,{id:"example-2",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-2",children:"Example 2:"})}),"\n",n(t.figure,{"data-rehype-pretty-code-figure":"",children:n(t.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(t.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(t.span,{"data-line":"",children:n(t.span,{children:'Input: `s = "bbbbb"`'})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:"Output: `1`"})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:'Explanation: The answer is `"b"`, with the length of 1.'})})]})})}),"\n",n(t.h3,{id:"example-3",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-3",children:"Example 3:"})}),"\n",n(t.figure,{"data-rehype-pretty-code-figure":"",children:n(t.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:l(t.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[n(t.span,{"data-line":"",children:n(t.span,{children:'Input: `s = "pwwkew"`'})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:"Output: `3`"})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{children:'Explanation: The answer is `"wke"`, with the length of 3. Notice that the answer must be a substring, `"pwke"` is a subsequence, not a substring.'})})]})})}),"\n",n(t.h3,{id:"constraints",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#constraints",children:"Constraints:"})}),"\n",l(t.ul,{children:["\n",n(t.li,{children:n(t.code,{children:"0 <= s.length <= 5 * 10^4"})}),"\n",l(t.li,{children:[n(t.code,{children:"s"})," consists of English letters, digits, symbols, and spaces."]}),"\n"]}),"\n",n(t.h2,{id:"approach",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#approach",children:"Approach"})}),"\n",n(t.p,{children:'To solve the "Longest Substring Without Repeating Characters" problem, we can use the sliding window technique. The sliding window is a flexible tool for solving problems where we need to check a substring or subarray, and it allows us to efficiently explore possible solutions without recomputing the whole window from scratch each time.'}),"\n",n(t.h3,{id:"sliding-window-concept",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#sliding-window-concept",children:"Sliding Window Concept"})}),"\n",n(t.p,{children:"Window Definition: The sliding window is defined by two pointers, left and right, which represent the start and end of the current substring.\nExpanding the Window: We move the right pointer to include new characters into the window.\nContracting the Window: If a duplicate character is encountered (i.e., a character that already exists within the current window), we move the left pointer to remove characters until the duplicate is no longer in the window.\nTracking the Longest Substring: At each step, we calculate the length of the current valid substring and keep track of the maximum length found so far."}),"\n",n(t.h3,{id:"key-observations",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#key-observations",children:"Key Observations"})}),"\n",n(t.p,{children:"The substring must not contain repeating characters, meaning that each time we encounter a duplicate, we need to shrink the window.\nWe use a bitset (boolean array) to track the characters in the current window. This helps in determining whether the current character is a duplicate.\nAt each step, we update the result with the length of the current substring if it's the longest we've seen so far."}),"\n",n(t.h3,{id:"algorithm",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#algorithm",children:"Algorithm"})}),"\n",n(t.p,{children:"We can solve this problem using the sliding window technique. The sliding window technique allows us to efficiently check all substrings while only iterating over the string once."}),"\n",l(t.ol,{children:["\n",l(t.li,{children:[n(t.strong,{children:"Sliding Window"}),": We use two pointers (",n(t.code,{children:"left"})," and ",n(t.code,{children:"right"}),") to represent the current window of the substring."]}),"\n",l(t.li,{children:[n(t.strong,{children:"Bitset Array"}),": We maintain a boolean array ",n(t.code,{children:"bitset"})," of size 256 (ASCII characters) to track whether a character exists in the current window."]}),"\n",l(t.li,{children:[n(t.strong,{children:"Expanding and Contracting"}),":","\n",l(t.ul,{children:["\n",l(t.li,{children:["As we move the ",n(t.code,{children:"right"})," pointer across the string, we check if the current character is already in the substring."]}),"\n",l(t.li,{children:["If it is, we shrink the window by moving the ",n(t.code,{children:"left"})," pointer."]}),"\n",n(t.li,{children:"If not, we expand the window and update the result."}),"\n"]}),"\n"]}),"\n",l(t.li,{children:[n(t.strong,{children:"Result Calculation"}),": At each step, we calculate the length of the current window and update the result if it's larger than the previous value."]}),"\n"]}),"\n",n(t.h3,{id:"flowchart",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#flowchart",children:"Flowchart"})}),"\n",n(t.p,{children:n(t.img,{src:"/leetcode/longest_3.png",alt:"Flowchart of Longest Substring Without Repeating Characters"})}),"\n",n(t.h3,{id:"implementation-in-go",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#implementation-in-go",children:"Implementation in Go"})}),"\n",n(t.figure,{"data-rehype-pretty-code-figure":"",children:n(t.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"go","data-theme":"github-dark",children:l(t.code,{"data-language":"go","data-theme":"github-dark",style:{display:"grid"},children:[l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"package"}),n(t.span,{style:{color:"#B392F0"},children:" main"})]}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"import"}),n(t.span,{style:{color:"#9ECBFF"},children:' "'}),n(t.span,{style:{color:"#B392F0"},children:"fmt"}),n(t.span,{style:{color:"#9ECBFF"},children:'"'})]}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#6A737D"},children:"// LengthOfLongestSubstring finds the length of the longest substring without repeating characters"})}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"func"}),n(t.span,{style:{color:"#B392F0"},children:" LengthOfLongestSubstring"}),n(t.span,{style:{color:"#E1E4E8"},children:"("}),n(t.span,{style:{color:"#FFAB70"},children:"s"}),n(t.span,{style:{color:"#F97583"},children:" string"}),n(t.span,{style:{color:"#E1E4E8"},children:") "}),n(t.span,{style:{color:"#F97583"},children:"int"}),n(t.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"    if"}),n(t.span,{style:{color:"#B392F0"},children:" len"}),n(t.span,{style:{color:"#E1E4E8"},children:"(s) "}),n(t.span,{style:{color:"#F97583"},children:"=="}),n(t.span,{style:{color:"#79B8FF"},children:" 0"}),n(t.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"        return"}),n(t.span,{style:{color:"#79B8FF"},children:" 0"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"    }"})}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"    var"}),n(t.span,{style:{color:"#E1E4E8"},children:" bitset ["}),n(t.span,{style:{color:"#79B8FF"},children:"256"}),n(t.span,{style:{color:"#E1E4E8"},children:"]"}),n(t.span,{style:{color:"#F97583"},children:"bool"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"    result, left, right "}),n(t.span,{style:{color:"#F97583"},children:":="}),n(t.span,{style:{color:"#79B8FF"},children:" 0"}),n(t.span,{style:{color:"#E1E4E8"},children:", "}),n(t.span,{style:{color:"#79B8FF"},children:"0"}),n(t.span,{style:{color:"#E1E4E8"},children:", "}),n(t.span,{style:{color:"#79B8FF"},children:"0"})]}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#6A737D"},children:"    // Sliding window with two pointers"})}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"    for"}),n(t.span,{style:{color:"#E1E4E8"},children:" left "}),n(t.span,{style:{color:"#F97583"},children:"<"}),n(t.span,{style:{color:"#B392F0"},children:" len"}),n(t.span,{style:{color:"#E1E4E8"},children:"(s) {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"        if"}),n(t.span,{style:{color:"#E1E4E8"},children:" bitset[s[right]] {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"            bitset[s[left]] "}),n(t.span,{style:{color:"#F97583"},children:"="}),n(t.span,{style:{color:"#79B8FF"},children:" false"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"            left"}),n(t.span,{style:{color:"#F97583"},children:"++"}),n(t.span,{style:{color:"#6A737D"},children:" // Shrink the window"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"        } "}),n(t.span,{style:{color:"#F97583"},children:"else"}),n(t.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"            bitset[s[right]] "}),n(t.span,{style:{color:"#F97583"},children:"="}),n(t.span,{style:{color:"#79B8FF"},children:" true"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"            right"}),n(t.span,{style:{color:"#F97583"},children:"++"}),n(t.span,{style:{color:"#6A737D"},children:" // Expand the window"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"        }"})}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#6A737D"},children:"        // Update the result if the current window is larger"})}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"        if"}),n(t.span,{style:{color:"#E1E4E8"},children:" result "}),n(t.span,{style:{color:"#F97583"},children:"<"}),n(t.span,{style:{color:"#E1E4E8"},children:" right"}),n(t.span,{style:{color:"#F97583"},children:"-"}),n(t.span,{style:{color:"#E1E4E8"},children:"left {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"            result "}),n(t.span,{style:{color:"#F97583"},children:"="}),n(t.span,{style:{color:"#E1E4E8"},children:" right "}),n(t.span,{style:{color:"#F97583"},children:"-"}),n(t.span,{style:{color:"#E1E4E8"},children:" left"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"        }"})}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#6A737D"},children:"        // Break if we have covered the entire string"})}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"        if"}),n(t.span,{style:{color:"#E1E4E8"},children:" left"}),n(t.span,{style:{color:"#F97583"},children:"+"}),n(t.span,{style:{color:"#E1E4E8"},children:"result "}),n(t.span,{style:{color:"#F97583"},children:">="}),n(t.span,{style:{color:"#B392F0"},children:" len"}),n(t.span,{style:{color:"#E1E4E8"},children:"(s) "}),n(t.span,{style:{color:"#F97583"},children:"||"}),n(t.span,{style:{color:"#E1E4E8"},children:" right "}),n(t.span,{style:{color:"#F97583"},children:">="}),n(t.span,{style:{color:"#B392F0"},children:" len"}),n(t.span,{style:{color:"#E1E4E8"},children:"(s) {"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#F97583"},children:"            break"})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"        }"})}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"    }"})}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"    return"}),n(t.span,{style:{color:"#E1E4E8"},children:" result"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",n(t.span,{"data-line":"",children:" "}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#F97583"},children:"func"}),n(t.span,{style:{color:"#B392F0"},children:" main"}),n(t.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"    s "}),n(t.span,{style:{color:"#F97583"},children:":="}),n(t.span,{style:{color:"#9ECBFF"},children:' "abcabcbb"'})]}),"\n",l(t.span,{"data-line":"",children:[n(t.span,{style:{color:"#E1E4E8"},children:"    fmt."}),n(t.span,{style:{color:"#B392F0"},children:"Println"}),n(t.span,{style:{color:"#E1E4E8"},children:"("}),n(t.span,{style:{color:"#B392F0"},children:"LengthOfLongestSubstring"}),n(t.span,{style:{color:"#E1E4E8"},children:"(s)) "}),n(t.span,{style:{color:"#6A737D"},children:"// Output: 3"})]}),"\n",n(t.span,{"data-line":"",children:n(t.span,{style:{color:"#E1E4E8"},children:"}"})})]})})}),"\n",n(t.h3,{id:"explanation",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#explanation",children:"Explanation"})}),"\n",l(t.ol,{children:["\n",l(t.li,{children:[n(t.strong,{children:"Initial Setup"}),": We first check if the string s is empty. If it is, we return 0 because there's no substring."]}),"\n",l(t.li,{children:[n(t.strong,{children:"Bitset and Two Pointers"}),": We initialize a boolean array bitset to track if a character is already in the current window. We also set up two pointers left and right to mark the bounds of the sliding window."]}),"\n",n(t.li,{children:"Sliding Window:"}),"\n"]}),"\n",l(t.ul,{children:["\n",n(t.li,{children:"For each character in the string, we check if it has already appeared in the current window."}),"\n",n(t.li,{children:"If it has, we move the left pointer to shrink the window."}),"\n",n(t.li,{children:"Otherwise, we move the right pointer to expand the window and include the new character."}),"\n"]}),"\n",l(t.ol,{start:"4",children:["\n",l(t.li,{children:[n(t.strong,{children:"Result Update"}),": After each iteration, we check if the current window size (right - left) is larger than the previous result. If so, we update the result."]}),"\n",l(t.li,{children:[n(t.strong,{children:"Termination"}),": The loop stops when either pointer reaches the end of the string or when the longest possible substring has been found."]}),"\n"]}),"\n",n(t.h3,{id:"time-and-space-complexity",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#time-and-space-complexity",children:"Time and Space Complexity"})}),"\n",l(t.ul,{children:["\n",l(t.li,{children:[n(t.strong,{children:"Time Complexity"}),": O(n) where n is the length of the string. Each character is visited at most twice (once by the right pointer and once by the left pointer)."]}),"\n",l(t.li,{children:[n(t.strong,{children:"Space Complexity"}),": O(1) because we use a fixed-size bitset array of 256 elements to track the presence of characters. This space usage does not depend on the input size."]}),"\n"]}),"\n",n(t.h2,{id:"conclusion",children:n(t.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#conclusion",children:"Conclusion"})}),"\n",n(t.p,{children:'The sliding window technique provides an efficient way to solve the "Longest Substring Without Repeating Characters" problem in linear time. By maintaining a bitset and adjusting the window size as we iterate through the string, we can easily track the longest valid substring.'})]})}return{default:function(e={}){const{wrapper:l}=e.components||{};return l?n(l,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};6:T665d,const{Fragment:n,jsx:l,jsxs:e}=arguments[0];function _createMdxContent(r){const s={a:"a",code:"code",figure:"figure",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...r.components};return e(n,{children:[l(s.h2,{id:"problem-statement",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#problem-statement",children:"Problem Statement"})}),"\n",e(s.p,{children:["Given two sorted arrays ",l(s.code,{children:"nums1"})," and ",l(s.code,{children:"nums2"})," of size ",l(s.code,{children:"m"})," and ",l(s.code,{children:"n"})," respectively, return the ",l(s.strong,{children:"median"})," of the two sorted arrays. The overall run-time complexity should be O(log (m+n))."]}),"\n",l(s.h3,{id:"example-1",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-1",children:"Example 1:"})}),"\n",l(s.figure,{"data-rehype-pretty-code-figure":"",children:l(s.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:e(s.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[l(s.span,{"data-line":"",children:l(s.span,{children:"Input: `nums1 = [1, 3]`, `nums2 = [2]`"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{children:"Output: `2.00000`"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{children:"Explanation: Merged array = `[1, 2, 3]`, and the median is `2`."})})]})})}),"\n",l(s.h3,{id:"example-2",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-2",children:"Example 2:"})}),"\n",l(s.figure,{"data-rehype-pretty-code-figure":"",children:l(s.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"plaintext","data-theme":"github-dark",children:e(s.code,{"data-language":"plaintext","data-theme":"github-dark",style:{display:"grid"},children:[l(s.span,{"data-line":"",children:l(s.span,{children:"Input: `nums1 = [1, 2]`, `nums2 = [3, 4]`"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{children:"Output: `2.50000`"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{children:"Explanation: Merged array = `[1, 2, 3, 4]`, and the median is `(2 + 3) / 2 = 2.5`."})})]})})}),"\n",l(s.h2,{id:"approach",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#approach",children:"Approach"})}),"\n",e(s.p,{children:["To solve the problem in O(log(m+n)) time complexity, we can avoid merging the two arrays and instead perform a ",l(s.strong,{children:"binary search"}),". The key idea is to partition the arrays such that the left half contains smaller or equal elements, and the right half contains larger elements."]}),"\n",l(s.h3,{id:"algorithm",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#algorithm",children:"Algorithm"})}),"\n",e(s.ol,{children:["\n",e(s.li,{children:["Ensure that ",l(s.code,{children:"nums1"})," is the smaller of the two arrays (this makes the binary search range smaller)."]}),"\n",e(s.li,{children:["Use binary search on the smaller array ",l(s.code,{children:"nums1"}),". We are trying to find a partition such that:","\n",e(s.ul,{children:["\n",e(s.li,{children:["Elements to the left of the partition in ",l(s.code,{children:"nums1"})," and ",l(s.code,{children:"nums2"})," are less than or equal to elements on the right."]}),"\n"]}),"\n"]}),"\n",e(s.li,{children:["For each partition, check if it satisfies the conditions to calculate the median:","\n",e(s.ul,{children:["\n",l(s.li,{children:"If valid, the median is the average of the maximum element from the left half and the minimum element from the right half (for even total length). If odd, it's just the maximum element from the left half."}),"\n"]}),"\n"]}),"\n"]}),"\n",l(s.h3,{id:"flowchart",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#flowchart",children:"Flowchart"})}),"\n",l(s.p,{children:l(s.img,{src:"/leetcode/median_two.png",alt:"Flowchart of Median Two"})}),"\n",l(s.h3,{id:"implementation-in-go",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#implementation-in-go",children:"Implementation in Go"})}),"\n",l(s.p,{children:"Here's the implementation of the solution using binary search:"}),"\n",l(s.figure,{"data-rehype-pretty-code-figure":"",children:l(s.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"go","data-theme":"github-dark",children:e(s.code,{"data-language":"go","data-theme":"github-dark",style:{display:"grid"},children:[e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"package"}),l(s.span,{style:{color:"#B392F0"},children:" main"})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"import"}),l(s.span,{style:{color:"#9ECBFF"},children:' "'}),l(s.span,{style:{color:"#B392F0"},children:"fmt"}),l(s.span,{style:{color:"#9ECBFF"},children:'"'})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#6A737D"},children:"// FindMedianSortedArray finds the median of two sorted arrays"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"func"}),l(s.span,{style:{color:"#B392F0"},children:" FindMedianSortedArray"}),l(s.span,{style:{color:"#E1E4E8"},children:"("}),l(s.span,{style:{color:"#FFAB70"},children:"nums1"}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#FFAB70"},children:"nums2"}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:") "}),l(s.span,{style:{color:"#F97583"},children:"float64"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1) "}),l(s.span,{style:{color:"#F97583"},children:">"}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums2) {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\t\treturn"}),l(s.span,{style:{color:"#B392F0"},children:" FindMedianSortedArray"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums2, nums1) "}),l(s.span,{style:{color:"#6A737D"},children:"// Ensure nums1 is the smaller array"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tlow, high "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#79B8FF"},children:" 0"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#B392F0"},children:"len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1)"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tk "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#E1E4E8"},children:" ("}),l(s.span,{style:{color:"#B392F0"},children:"len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1) "}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums2) "}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#79B8FF"},children:" 1"}),l(s.span,{style:{color:"#E1E4E8"},children:") "}),l(s.span,{style:{color:"#F97583"},children:">>"}),l(s.span,{style:{color:"#79B8FF"},children:" 1"}),l(s.span,{style:{color:"#6A737D"},children:" // Midpoint calculation"})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tvar"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid, nums2Mid "}),l(s.span,{style:{color:"#F97583"},children:"int"})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tfor"}),l(s.span,{style:{color:"#E1E4E8"},children:" low "}),l(s.span,{style:{color:"#F97583"},children:"<="}),l(s.span,{style:{color:"#E1E4E8"},children:" high {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tnums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" low "}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#E1E4E8"},children:" (high"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#E1E4E8"},children:"low)"}),l(s.span,{style:{color:"#F97583"},children:">>"}),l(s.span,{style:{color:"#79B8FF"},children:"1"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tnums2Mid "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" k "}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid"})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#6A737D"},children:"\t\t// Adjust binary search boundaries"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\t\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:">"}),l(s.span,{style:{color:"#79B8FF"},children:" 0"}),l(s.span,{style:{color:"#F97583"},children:" &&"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1[nums1Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"] "}),l(s.span,{style:{color:"#F97583"},children:">"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2[nums2Mid] {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\t\thigh "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:" 1"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#F97583"},children:" if"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"!="}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1) "}),l(s.span,{style:{color:"#F97583"},children:"&&"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1[nums1Mid] "}),l(s.span,{style:{color:"#F97583"},children:"<"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2[nums2Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"] {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\t\tlow "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#79B8FF"},children:" 1"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#F97583"},children:"\t\t\tbreak"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t\t}"})}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#6A737D"},children:"\t// Finding midLeft and midRight"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tvar"}),l(s.span,{style:{color:"#E1E4E8"},children:" midLeft, midRight "}),l(s.span,{style:{color:"#F97583"},children:"int"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"=="}),l(s.span,{style:{color:"#79B8FF"},children:" 0"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidLeft "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2[nums2Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"]"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#F97583"},children:" if"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2Mid "}),l(s.span,{style:{color:"#F97583"},children:"=="}),l(s.span,{style:{color:"#79B8FF"},children:" 0"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidLeft "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1[nums1Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"]"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidLeft "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#B392F0"},children:" Max"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1[nums1Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"], nums2[nums2Mid"}),l(s.span,{style:{color:"#F97583"},children:"-"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:"])"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" ("}),l(s.span,{style:{color:"#B392F0"},children:"len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1)"}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#B392F0"},children:"len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums2))"}),l(s.span,{style:{color:"#F97583"},children:"%"}),l(s.span,{style:{color:"#79B8FF"},children:"2"}),l(s.span,{style:{color:"#F97583"},children:" =="}),l(s.span,{style:{color:"#79B8FF"},children:" 1"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\t\treturn"}),l(s.span,{style:{color:"#F97583"},children:" float64"}),l(s.span,{style:{color:"#E1E4E8"},children:"(midLeft) "}),l(s.span,{style:{color:"#6A737D"},children:"// Odd number of elements, median is midLeft"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1Mid "}),l(s.span,{style:{color:"#F97583"},children:"=="}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1) {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidRight "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2[nums2Mid]"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#F97583"},children:" if"}),l(s.span,{style:{color:"#E1E4E8"},children:" nums2Mid "}),l(s.span,{style:{color:"#F97583"},children:"=="}),l(s.span,{style:{color:"#B392F0"},children:" len"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums2) {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidRight "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#E1E4E8"},children:" nums1[nums1Mid]"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t} "}),l(s.span,{style:{color:"#F97583"},children:"else"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\t\tmidRight "}),l(s.span,{style:{color:"#F97583"},children:"="}),l(s.span,{style:{color:"#B392F0"},children:" Min"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1[nums1Mid], nums2[nums2Mid])"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\treturn"}),l(s.span,{style:{color:"#F97583"},children:" float64"}),l(s.span,{style:{color:"#E1E4E8"},children:"(midLeft"}),l(s.span,{style:{color:"#F97583"},children:"+"}),l(s.span,{style:{color:"#E1E4E8"},children:"midRight) "}),l(s.span,{style:{color:"#F97583"},children:"/"}),l(s.span,{style:{color:"#79B8FF"},children:" 2"}),l(s.span,{style:{color:"#6A737D"},children:" // Even number of elements"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#6A737D"},children:"// Max returns the larger of two integers"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"func"}),l(s.span,{style:{color:"#B392F0"},children:" Max"}),l(s.span,{style:{color:"#E1E4E8"},children:"("}),l(s.span,{style:{color:"#FFAB70"},children:"a"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#FFAB70"},children:"b"}),l(s.span,{style:{color:"#F97583"},children:" int"}),l(s.span,{style:{color:"#E1E4E8"},children:") "}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" a "}),l(s.span,{style:{color:"#F97583"},children:">"}),l(s.span,{style:{color:"#E1E4E8"},children:" b {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\t\treturn"}),l(s.span,{style:{color:"#E1E4E8"},children:" a"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\treturn"}),l(s.span,{style:{color:"#E1E4E8"},children:" b"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#6A737D"},children:"// Min returns the smaller of two integers"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"func"}),l(s.span,{style:{color:"#B392F0"},children:" Min"}),l(s.span,{style:{color:"#E1E4E8"},children:"("}),l(s.span,{style:{color:"#FFAB70"},children:"a"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#FFAB70"},children:"b"}),l(s.span,{style:{color:"#F97583"},children:" int"}),l(s.span,{style:{color:"#E1E4E8"},children:") "}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\tif"}),l(s.span,{style:{color:"#E1E4E8"},children:" a "}),l(s.span,{style:{color:"#F97583"},children:"<"}),l(s.span,{style:{color:"#E1E4E8"},children:" b {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\t\treturn"}),l(s.span,{style:{color:"#E1E4E8"},children:" a"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"\t}"})}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"\treturn"}),l(s.span,{style:{color:"#E1E4E8"},children:" b"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#F97583"},children:"func"}),l(s.span,{style:{color:"#B392F0"},children:" main"}),l(s.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tnums1 "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:"{"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#79B8FF"},children:"3"}),l(s.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tnums2 "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:"{"}),l(s.span,{style:{color:"#79B8FF"},children:"2"}),l(s.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tfmt."}),l(s.span,{style:{color:"#B392F0"},children:"Println"}),l(s.span,{style:{color:"#E1E4E8"},children:"("}),l(s.span,{style:{color:"#B392F0"},children:"FindMedianSortedArray"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums1, nums2)) "}),l(s.span,{style:{color:"#6A737D"},children:"// Output: 2.00000"})]}),"\n",l(s.span,{"data-line":"",children:" "}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tnums3 "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:"{"}),l(s.span,{style:{color:"#79B8FF"},children:"1"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#79B8FF"},children:"2"}),l(s.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tnums4 "}),l(s.span,{style:{color:"#F97583"},children:":="}),l(s.span,{style:{color:"#E1E4E8"},children:" []"}),l(s.span,{style:{color:"#F97583"},children:"int"}),l(s.span,{style:{color:"#E1E4E8"},children:"{"}),l(s.span,{style:{color:"#79B8FF"},children:"3"}),l(s.span,{style:{color:"#E1E4E8"},children:", "}),l(s.span,{style:{color:"#79B8FF"},children:"4"}),l(s.span,{style:{color:"#E1E4E8"},children:"}"})]}),"\n",e(s.span,{"data-line":"",children:[l(s.span,{style:{color:"#E1E4E8"},children:"\tfmt."}),l(s.span,{style:{color:"#B392F0"},children:"Println"}),l(s.span,{style:{color:"#E1E4E8"},children:"("}),l(s.span,{style:{color:"#B392F0"},children:"FindMedianSortedArray"}),l(s.span,{style:{color:"#E1E4E8"},children:"(nums3, nums4)) "}),l(s.span,{style:{color:"#6A737D"},children:"// Output: 2.50000"})]}),"\n",l(s.span,{"data-line":"",children:l(s.span,{style:{color:"#E1E4E8"},children:"}"})})]})})}),"\n",l(s.h3,{id:"explanation",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#explanation",children:"Explanation"})}),"\n",e(s.ol,{children:["\n",e(s.li,{children:[l(s.strong,{children:"Initial Setup"}),": Ensure nums1 is smaller than nums2 to keep the binary search range smaller. We calculate the total middle index k and begin the binary search."]}),"\n",e(s.li,{children:[l(s.strong,{children:"Binary Search"}),": In each iteration, we partition nums1 and nums2 and check if the partition is valid. We adjust the low and high pointers until we find the correct partition."]}),"\n",e(s.li,{children:[l(s.strong,{children:"Median Calculation"}),": Once the partition is valid, we compute midLeft and midRight (the two middle elements) and return the median."]}),"\n"]}),"\n",l(s.h3,{id:"time-and-space-complexity",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#time-and-space-complexity",children:"Time and Space Complexity"})}),"\n",e(s.ol,{children:["\n",e(s.li,{children:[l(s.strong,{children:"Time Complexity"}),": The algorithm runs in O(log(min(m, n))) where m and n are the lengths of the two input arrays. We perform binary search on the smaller array."]}),"\n",e(s.li,{children:[l(s.strong,{children:"Space Complexity"}),": O(1), as no additional space is required beyond a few variables."]}),"\n"]}),"\n",l(s.h2,{id:"conclusion",children:l(s.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#conclusion",children:"Conclusion"})}),"\n",l(s.p,{children:"This solution efficiently solves the problem of finding the median of two sorted arrays in logarithmic time by using binary search, making it suitable for large arrays with different sizes. The algorithm ensures optimal time complexity by focusing on the smaller array in the binary search process."})]})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?l(e,{...n,children:l(_createMdxContent,{...n})}):_createMdxContent(n)}};7:T3104,const{Fragment:e,jsx:n,jsxs:l}=arguments[0];function _createMdxContent(r){const i={a:"a",code:"code",figure:"figure",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...r.components};return l(e,{children:[n(i.h2,{id:"problem-statement",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#problem-statement",children:"Problem Statement"})}),"\n",l(i.p,{children:["Given an integer ",n(i.code,{children:"x"}),", return ",n(i.code,{children:"true"})," if ",n(i.code,{children:"x"})," is a palindrome, and ",n(i.code,{children:"false"})," otherwise."]}),"\n",l(i.p,{children:["A palindrome is a number that reads the same forward and backward. For example, ",n(i.code,{children:"121"})," is a palindrome because it reads as ",n(i.code,{children:"121"})," from both directions."]}),"\n",n(i.h3,{id:"example-1",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-1",children:"Example 1:"})}),"\n",l(i.ul,{children:["\n",l(i.li,{children:[n(i.strong,{children:"Input"}),": ",n(i.code,{children:"x = 121"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Output"}),": ",n(i.code,{children:"true"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Explanation"}),": 121 reads as 121 from left to right and from right to left."]}),"\n"]}),"\n",n(i.h3,{id:"example-2",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-2",children:"Example 2:"})}),"\n",l(i.ul,{children:["\n",l(i.li,{children:[n(i.strong,{children:"Input"}),": ",n(i.code,{children:"x = -121"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Output"}),": ",n(i.code,{children:"false"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Explanation"}),": The number -121 reads 121- from right to left, which is not the same."]}),"\n"]}),"\n",n(i.h3,{id:"example-3",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#example-3",children:"Example 3:"})}),"\n",l(i.ul,{children:["\n",l(i.li,{children:[n(i.strong,{children:"Input"}),": ",n(i.code,{children:"x = 10"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Output"}),": ",n(i.code,{children:"false"})]}),"\n",l(i.li,{children:[n(i.strong,{children:"Explanation"}),": 10 reads as 01 when reversed, which is not a palindrome."]}),"\n"]}),"\n",n(i.h3,{id:"constraints",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#constraints",children:"Constraints:"})}),"\n",l(i.ul,{children:["\n",l(i.li,{children:[n(i.code,{children:"-2^31 <= x <= 2^31 - 1"})," (32-bit signed integer)"]}),"\n"]}),"\n",n(i.h2,{id:"approach",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#approach",children:"Approach"})}),"\n",n(i.h3,{id:"algorithm",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#algorithm",children:"Algorithm"})}),"\n",l(i.ol,{children:["\n",l(i.li,{children:[n(i.strong,{children:"Negative Check"}),": If the number is negative, it is not a palindrome because negative signs only appear on one side."]}),"\n",l(i.li,{children:[n(i.strong,{children:"Zero and Last-Digit Check"}),": If the number ends in ",n(i.code,{children:"0"})," but is not ",n(i.code,{children:"0"})," itself, it cannot be a palindrome. For example, ",n(i.code,{children:"10"})," is not a palindrome."]}),"\n",l(i.li,{children:[n(i.strong,{children:"Revert Half of the Number"}),":","\n",l(i.ul,{children:["\n",n(i.li,{children:"Reverse the second half of the integer and compare it to the first half. If they are equal, then the number is a palindrome."}),"\n",l(i.li,{children:["For instance, for ",n(i.code,{children:"x = 121"}),", after reversing the last half (",n(i.code,{children:"21"})," becomes ",n(i.code,{children:"12"}),"), it can be compared with the first half."]}),"\n"]}),"\n"]}),"\n"]}),"\n",n(i.h3,{id:"implementation-in-go",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#implementation-in-go",children:"Implementation in Go"})}),"\n",n(i.figure,{"data-rehype-pretty-code-figure":"",children:n(i.pre,{style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0","data-language":"go","data-theme":"github-dark",children:l(i.code,{"data-language":"go","data-theme":"github-dark",style:{display:"grid"},children:[l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"package"}),n(i.span,{style:{color:"#B392F0"},children:" main"})]}),"\n",n(i.span,{"data-line":"",children:" "}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"import"}),n(i.span,{style:{color:"#9ECBFF"},children:' "'}),n(i.span,{style:{color:"#B392F0"},children:"fmt"}),n(i.span,{style:{color:"#9ECBFF"},children:'"'})]}),"\n",n(i.span,{"data-line":"",children:" "}),"\n",n(i.span,{"data-line":"",children:n(i.span,{style:{color:"#6A737D"},children:"// isPalindrome checks if a given integer x is a palindrome"})}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"func"}),n(i.span,{style:{color:"#B392F0"},children:" isPalindrome"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#FFAB70"},children:"x"}),n(i.span,{style:{color:"#F97583"},children:" int"}),n(i.span,{style:{color:"#E1E4E8"},children:") "}),n(i.span,{style:{color:"#F97583"},children:"bool"}),n(i.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"    if"}),n(i.span,{style:{color:"#E1E4E8"},children:" x "}),n(i.span,{style:{color:"#F97583"},children:"<"}),n(i.span,{style:{color:"#79B8FF"},children:" 0"}),n(i.span,{style:{color:"#F97583"},children:" ||"}),n(i.span,{style:{color:"#E1E4E8"},children:" (x"}),n(i.span,{style:{color:"#F97583"},children:"%"}),n(i.span,{style:{color:"#79B8FF"},children:"10"}),n(i.span,{style:{color:"#F97583"},children:" =="}),n(i.span,{style:{color:"#79B8FF"},children:" 0"}),n(i.span,{style:{color:"#F97583"},children:" &&"}),n(i.span,{style:{color:"#E1E4E8"},children:" x "}),n(i.span,{style:{color:"#F97583"},children:"!="}),n(i.span,{style:{color:"#79B8FF"},children:" 0"}),n(i.span,{style:{color:"#E1E4E8"},children:") {"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"        return"}),n(i.span,{style:{color:"#79B8FF"},children:" false"})]}),"\n",n(i.span,{"data-line":"",children:n(i.span,{style:{color:"#E1E4E8"},children:"    }"})}),"\n",n(i.span,{"data-line":"",children:" "}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"    revertedNumber "}),n(i.span,{style:{color:"#F97583"},children:":="}),n(i.span,{style:{color:"#79B8FF"},children:" 0"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"    for"}),n(i.span,{style:{color:"#E1E4E8"},children:" x "}),n(i.span,{style:{color:"#F97583"},children:">"}),n(i.span,{style:{color:"#E1E4E8"},children:" revertedNumber {"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"        revertedNumber "}),n(i.span,{style:{color:"#F97583"},children:"="}),n(i.span,{style:{color:"#E1E4E8"},children:" revertedNumber"}),n(i.span,{style:{color:"#F97583"},children:"*"}),n(i.span,{style:{color:"#79B8FF"},children:"10"}),n(i.span,{style:{color:"#F97583"},children:" +"}),n(i.span,{style:{color:"#E1E4E8"},children:" x"}),n(i.span,{style:{color:"#F97583"},children:"%"}),n(i.span,{style:{color:"#79B8FF"},children:"10"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"        x "}),n(i.span,{style:{color:"#F97583"},children:"/="}),n(i.span,{style:{color:"#79B8FF"},children:" 10"})]}),"\n",n(i.span,{"data-line":"",children:n(i.span,{style:{color:"#E1E4E8"},children:"    }"})}),"\n",n(i.span,{"data-line":"",children:" "}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"    return"}),n(i.span,{style:{color:"#E1E4E8"},children:" x "}),n(i.span,{style:{color:"#F97583"},children:"=="}),n(i.span,{style:{color:"#E1E4E8"},children:" revertedNumber "}),n(i.span,{style:{color:"#F97583"},children:"||"}),n(i.span,{style:{color:"#E1E4E8"},children:" x "}),n(i.span,{style:{color:"#F97583"},children:"=="}),n(i.span,{style:{color:"#E1E4E8"},children:" revertedNumber"}),n(i.span,{style:{color:"#F97583"},children:"/"}),n(i.span,{style:{color:"#79B8FF"},children:"10"})]}),"\n",n(i.span,{"data-line":"",children:n(i.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",n(i.span,{"data-line":"",children:" "}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#F97583"},children:"func"}),n(i.span,{style:{color:"#B392F0"},children:" main"}),n(i.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"    fmt."}),n(i.span,{style:{color:"#B392F0"},children:"Println"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#B392F0"},children:"isPalindrome"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#79B8FF"},children:"121"}),n(i.span,{style:{color:"#E1E4E8"},children:"))  "}),n(i.span,{style:{color:"#6A737D"},children:"// Output: true"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"    fmt."}),n(i.span,{style:{color:"#B392F0"},children:"Println"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#B392F0"},children:"isPalindrome"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#F97583"},children:"-"}),n(i.span,{style:{color:"#79B8FF"},children:"121"}),n(i.span,{style:{color:"#E1E4E8"},children:")) "}),n(i.span,{style:{color:"#6A737D"},children:"// Output: false"})]}),"\n",l(i.span,{"data-line":"",children:[n(i.span,{style:{color:"#E1E4E8"},children:"    fmt."}),n(i.span,{style:{color:"#B392F0"},children:"Println"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#B392F0"},children:"isPalindrome"}),n(i.span,{style:{color:"#E1E4E8"},children:"("}),n(i.span,{style:{color:"#79B8FF"},children:"10"}),n(i.span,{style:{color:"#E1E4E8"},children:"))   "}),n(i.span,{style:{color:"#6A737D"},children:"// Output: false"})]}),"\n",n(i.span,{"data-line":"",children:n(i.span,{style:{color:"#E1E4E8"},children:"}"})}),"\n",n(i.span,{"data-line":"",children:" "})]})})}),"\n",n(i.h3,{id:"explanation",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#explanation",children:"Explanation"})}),"\n",l(i.ol,{children:["\n",n(i.li,{children:"Step 1: We first check if x is negative or if it ends with a zero (except when x is 0). If either of these conditions is true, we return false immediately."}),"\n",n(i.li,{children:"Step 2: We then reverse half of the digits of x. This is done by extracting the last digit (using x % 10), appending it to the reversed number, and removing the last digit from x (using x /= 10)."}),"\n",n(i.li,{children:"Step 3: We continue this process until the reversed number is equal to or greater than x. This tells us we've processed half of the digits. If the remaining part of x equals the reversed number, or if ignoring the middle digit (for odd-length numbers) results in equality, then the number is a palindrome."}),"\n"]}),"\n",n(i.h3,{id:"time-and-space-complexity",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#time-and-space-complexity",children:"Time and Space Complexity"})}),"\n",l(i.ol,{children:["\n",l(i.li,{children:[n(i.strong,{children:"Time Complexity"}),": O(log₁₀(n)), where n is the input number. We reduce x by one digit in every loop iteration, so the time complexity is proportional to the number of digits in x."]}),"\n",l(i.li,{children:[n(i.strong,{children:"Space Complexity"}),": O(1). We use a constant amount of space for variables like revertedNumber and x."]}),"\n"]}),"\n",n(i.h2,{id:"conclusion",children:n(i.a,{className:"subheading-anchor","aria-label":"Link to section",href:"#conclusion",children:"Conclusion"})}),"\n",n(i.p,{children:"This solution efficiently checks if an integer is a palindrome by reversing half of the number and comparing it with the other half. It avoids the need for extra space (like converting the integer into a string) and handles edge cases such as negative numbers and integers that end in zeros."})]})}return{default:function(e={}){const{wrapper:l}=e.components||{};return l?n(l,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};9:["tag","algorithms","d"]
e:T843,M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z11:T843,M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z0:["mSeFdEyp-W0wLS6EII0va",[[["",{"children":["tags",{"children":[["tag","algorithms","d"],{"children":["__PAGE__?{\"tag\":\"algorithms\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["tags",{"children":[["tag","algorithms","d"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"title":"algorithms","tag":"algorithms","displayPosts":[{"slug":"blog/add-two-number_leetcode","title":"Add Two Numbers","description":"Solve the \"Add Two Numbers\" problem efficiently using linked lists in Go.","date":"2024-09-28T00:00:00.000Z","published":true,"tags":["leetcode","golang","algorithms"],"body":"$3","slugAsParams":"add-two-number_leetcode"},{"slug":"blog/longest-palingdrome-substring_leetcode","title":"Longest Palindromic Substring","description":"Solve the \"Longest Palindromic Substring\" problem efficiently using expand around center technique in Go.","date":"2024-09-28T00:00:00.000Z","published":true,"tags":["leetcode","golang","algorithms"],"body":"$4","slugAsParams":"longest-palingdrome-substring_leetcode"},{"slug":"blog/longest-substring_leetcode","title":"Longest Substring Without Repeating Characters","description":"Solve the \"Longest Substring Without Repeating Characters\" problem efficiently using sliding window technique in Go.","date":"2024-09-28T00:00:00.000Z","published":true,"tags":["leetcode","golang","algorithms"],"body":"$5","slugAsParams":"longest-substring_leetcode"},{"slug":"blog/median-two_leetcode","title":"Median of Two Sorted Arrays","description":"Solve the \"Median of Two Sorted Arrays\" problem efficiently using binary search in Go.","date":"2024-09-28T00:00:00.000Z","published":true,"tags":["leetcode","golang","algorithms"],"body":"$6","slugAsParams":"median-two_leetcode"},{"slug":"blog/palingdrome_leetcode","title":"Palindrome Number","description":"Learn how to efficiently solve the Palindrome Number problem in Go, using simple arithmetic.","date":"2024-09-28T00:00:00.000Z","published":true,"tags":["leetcode","golang","algorithms"],"body":"$7","slugAsParams":"palingdrome_leetcode"}],"totalPages":2,"currentPage":1,"sortedTags":["leetcode","golang","algorithms","rust","python","mathematics","artificial-intelligence","java","typescript"],"tags":{"leetcode":9,"golang":9,"algorithms":9,"rust":3,"python":2,"mathematics":1,"artificial-intelligence":1,"java":1,"typescript":1}}],null]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","className":"scroll-pt-[3.5rem]","children":["$","body",null,{"className":"min-h-screen font-sans antialiased __variable_36bd41","children":["$","$Lb",null,{"children":["$","div",null,{"className":"relative flex min-h-dvh flex-col","children":[["$","header",null,{"className":"z-10 sticky top-0 w-full border-b border-border bg-gray-100 dark:bg-[#1e2023] backdrop-blur supports-[backdrop-filter]:bg-gray-100/60 dark:supports-[backdrop-filter]:bg-[#1e2023]/60","children":["$","div",null,{"className":"container flex h-14 max-w-screen-2xl items-center text-[#585a5c] dark:text-slate-200","children":[["$","$Lc",null,{}],["$","div",null,{"className":"flex flex-1 items-center justify-end space-x-2","children":["$","nav",null,{"className":"flex items-center","children":[["$","$Ld",null,{"href":"https://github.com/renaldyhidayatt","target":"_blank","rel":"noreferrer","children":["$","div",null,{"className":"items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 py-2 w-10 px-0 hidden sm:inline-flex text-[#585a5c] dark:text-slate-200","children":[["$","svg",null,{"viewBox":"0 0 438.549 438.549","className":"h-4 w-4","children":["$","path",null,{"fill":"currentColor","d":"$e"}]}],["$","span",null,{"className":"sr-only","children":"GitHub"}]]}]}],["$","$Lf",null,{}],["$","$L10",null,{}]]}]}]]}]}],["$","main",null,{"className":"flex-1","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"children":["$","div",null,{"className":"mb-6 mt-14 flex flex-col items-center text-[#585a5c] dark:text-slate-200","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"target":"_blank","rel":"noreferrer","href":"mailto:renaldyhidayatt@gmail.com","children":[["$","span",null,{"className":"sr-only","children":"Mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-mail h-6 w-6","children":[["$","rect","18n3k1",{"width":"20","height":"16","x":"2","y":"4","rx":"2"}],["$","path","1ocrg3",{"d":"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"}],"$undefined"]}]]}],["$","a",null,{"target":"_blank","rel":"noreferrer","href":"https://github.com/renaldyhidayatt","children":[["$","span",null,{"className":"sr-only","children":"GitHub"}],["$","svg",null,{"viewBox":"0 0 438.549 438.549","className":"h-6 w-6","children":["$","path",null,{"fill":"currentColor","d":"$11"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-muted-foreground","children":["$","a",null,{"href":"https://renaldyhidayatt,github.io","target":"_blank","children":"Renaldy Hidayat"}]}]]}]}]]}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e5f72294912ffa67.css","precedence":"next","crossOrigin":""}]],"$L12"]]]]
12:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"white"}],["$","meta","2",{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"black"}],["$","meta","3",{"charSet":"utf-8"}],["$","title","4",{"children":"algorithms"}],["$","meta","5",{"name":"description","content":"Posts on the topic of algorithms"}],["$","link","6",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"40x40"}],["$","link","7",{"rel":"icon","href":"/icon.png?7afe6198b88df141","type":"image/png","sizes":"40x40"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
